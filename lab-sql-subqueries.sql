-- 1. How many copies of the film Hunchback Impossible exist in the inventory system?

SELECT FILM_ID FROM SAKILA.FILM
WHERE TITLE = 'Hunchback Impossible';

SELECT * FROM SAKILA.INVENTORY
WHERE FILM_ID = 439;

SELECT FILM_ID, COUNT(INVENTORY_ID) AS COPIES
FROM SAKILA.INVENTORY
WHERE FILM_ID = 439
GROUP BY FILM_ID;

SELECT COPIES
	FROM (
		SELECT FILM_ID, COUNT(INVENTORY_ID) AS COPIES
		FROM SAKILA.INVENTORY
		WHERE FILM_ID = (
			SELECT FILM_ID FROM SAKILA.FILM
			WHERE TITLE = 'Hunchback Impossible'
		) 
	GROUP BY FILM_ID
	) SUB1
;

-- 2. List all films whose length is longer than the average of all the films.

SELECT * FROM SAKILA.FILM;

SELECT AVG(LENGTH) AS AVG_LENGTH
FROM SAKILA.FILM;

SELECT FILM_ID
FROM SAKILA.FILM
WHERE LENGTH > (
	SELECT AVG(LENGTH) AS AVG_LENGTH
	FROM SAKILA.FILM
);


-- 3. Use subqueries to display all actors who appear in the film Alone Trip.

SELECT FILM_ID
FROM SAKILA.FILM
WHERE TITLE = 'Alone Trip'
;

SELECT ACTOR_ID FROM SAKILA.FILM_ACTOR
WHERE FILM_ID = (
	SELECT FILM_ID
	FROM SAKILA.FILM
	WHERE TITLE = 'Alone Trip'
)
;

SELECT FIRST_NAME, LAST_NAME FROM SAKILA.ACTOR
WHERE ACTOR_ID IN (
	SELECT ACTOR_ID FROM SAKILA.FILM_ACTOR
		WHERE FILM_ID = (
			SELECT FILM_ID
			FROM SAKILA.FILM
			WHERE TITLE = 'Alone Trip'
		)
);

-- 4. Sales have been lagging among young families, and you wish to target all family movies for a promotion. 
-- Identify all movies categorized as family films.

SELECT * FROM SAKILA.FILM_CATEGORY;
SELECT * FROM SAKILA.CATEGORY;

SELECT CATEGORY_ID FROM SAKILA.CATEGORY
WHERE NAME = 'FAMILY';

SELECT FILM_ID 
FROM SAKILA.FILM_CATEGORY
WHERE CATEGORY_ID = (
SELECT CATEGORY_ID FROM SAKILA.CATEGORY
WHERE NAME = 'FAMILY'
) 
;


-- 5. Get name and email from customers from Canada using subqueries. Do the same with joins. 
-- Note that to create a join, you will have to identify the correct tables with their primary keys and foreign keys, 
-- that will help you get the relevant information.


-- DOING IT WITH SUBQERIES

SELECT * FROM SAKILA.ADDRESS;
SELECT * FROM SAKILA.CITY;
SELECT * FROM SAKILA.COUNTRY;
SELECT * FROM SAKILA.CUSTOMER;

SELECT COUNTRY FROM SAKILA.COUNTRY;

SELECT ADDRESS_ID
FROM SAKILA.ADDRESS
WHERE CITY_ID IN(
	SELECT CITY_ID
	FROM SAKILA.CITY
	WHERE COUNTRY_ID = (
		SELECT COUNTRY_ID
		FROM SAKILA.COUNTRY
		WHERE COUNTRY = 'CANADA')
	)
;

SELECT CITY_ID
FROM SAKILA.CITY
WHERE COUNTRY_ID = (
	SELECT COUNTRY_ID
	FROM SAKILA.COUNTRY
	WHERE COUNTRY = 'CANADA')
;

SELECT COUNTRY_ID
FROM SAKILA.COUNTRY
WHERE COUNTRY = 'CANADA';


SELECT FIRST_NAME, lAST_NAME, EMAIL
FROM SAKILA.CUSTOMER
WHERE ADDRESS_ID IN (
	SELECT ADDRESS_ID
	FROM SAKILA.ADDRESS
	WHERE CITY_ID IN(
		SELECT CITY_ID
		FROM SAKILA.CITY
		WHERE COUNTRY_ID = (
			SELECT COUNTRY_ID
			FROM SAKILA.COUNTRY
			WHERE COUNTRY = 'CANADA')
		)
) ;

-- DOING IT WITH JOINS

SELECT S.STORE_ID, C.CITY, CC.COUNTRY
FROM SAKILA.STORE S
LEFT JOIN SAKILA.ADDRESS A
ON S.ADDRESS_ID = A.ADDRESS_ID
LEFT JOIN SAKILA.CITY C
ON A.CITY_ID = C.CITY_ID
LEFT JOIN SAKILA.COUNTRY CC
ON C.COUNTRY_ID = CC.COUNTRY_ID
;

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, C.EMAIL
FROM SAKILA.CUSTOMER C
LEFT JOIN SAKILA.ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID
LEFT JOIN SAKILA.CITY CITY
ON A.CITY_ID = CITY.CITY_ID
LEFT JOIN SAKILA.COUNTRY COUN
ON CITY.COUNTRY_ID = COUN.COUNTRY_ID
WHERE COUN.COUNTRY = 'CANADA';


-- 6. Which are films starred by the most prolific actor?
-- Most prolific actor is defined as the actor that has acted in the most number of films. 
-- First you will have to find the most prolific actor and then use that actor_id to find the different films that he/she starred.

SELECT ACTOR_ID, COUNT(FILM_ID)
FROM SAKILA.FILM_ACTOR
GROUP BY ACTOR_ID
ORDER BY ACTOR_ID DESC
LIMIT 1;

SELECT ACTOR_ID
FROM (
SELECT ACTOR_ID, COUNT(FILM_ID)
FROM SAKILA.FILM_ACTOR
GROUP BY ACTOR_ID
ORDER BY ACTOR_ID DESC
LIMIT 1
) SUB1
;


SELECT FILM_ID
FROM SAKILA.FILM_ACTOR
WHERE ACTOR_ID = (
	SELECT ACTOR_ID
	FROM (
		SELECT ACTOR_ID, COUNT(FILM_ID)
		FROM SAKILA.FILM_ACTOR
		GROUP BY ACTOR_ID
		ORDER BY ACTOR_ID DESC
		LIMIT 1
	) SUB1
)
;



SELECT * FROM SAKILA.FILM;


SELECT TITLE
FROM SAKILA.FILM
WHERE FILM_ID IN (
SELECT FILM_ID
FROM SAKILA.FILM_ACTOR
WHERE ACTOR_ID = (
	SELECT ACTOR_ID
	FROM (
		SELECT ACTOR_ID, COUNT(FILM_ID)
		FROM SAKILA.FILM_ACTOR
		GROUP BY ACTOR_ID
		ORDER BY ACTOR_ID DESC
		LIMIT 1
	) SUB1
)
);


-- 7. Films rented by most profitable customer. 
-- You can use the customer table and payment table to find the most profitable customer ie the customer 
-- that has made the largest sum of payments

SELECT * FROM SAKILA.CUSTOMER;
SELECT * FROM SAKILA.PAYMENT;
SELECT * FROM SAKILA.RENTAL;
SELECT * FROM SAKILA.INVENTORY;
SELECT * FROM SAKILA.FILM;

-- STEP 1
SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
FROM SAKILA.PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY TOTAL DESC
LIMIT 1;

-- STEP 2

SELECT CUSTOMER_ID
FROM (
	SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
	FROM SAKILA.PAYMENT
	GROUP BY CUSTOMER_ID
	ORDER BY TOTAL DESC
	LIMIT 1
) SUB2
;


-- STEP 3

SELECT INVENTORY_ID 
FROM SAKILA.RENTAL
WHERE CUSTOMER_ID = (
SELECT CUSTOMER_ID
FROM (
	SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
	FROM SAKILA.PAYMENT
	GROUP BY CUSTOMER_ID
	ORDER BY TOTAL DESC
	LIMIT 1
) SUB2
)
;

-- STEP 4

SELECT FILM_ID
FROM SAKILA.INVENTORY
WHERE INVENTORY_ID IN (
SELECT INVENTORY_ID 
FROM SAKILA.RENTAL
WHERE CUSTOMER_ID = (
SELECT CUSTOMER_ID
FROM (
	SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
	FROM SAKILA.PAYMENT
	GROUP BY CUSTOMER_ID
	ORDER BY TOTAL DESC
	LIMIT 1
) SUB2
)
)
;


-- STEP 5

SELECT TITLE
FROM SAKILA.FILM
WHERE FILM_ID IN (
SELECT FILM_ID
FROM SAKILA.INVENTORY
WHERE INVENTORY_ID IN (
SELECT INVENTORY_ID 
FROM SAKILA.RENTAL
WHERE CUSTOMER_ID = (
SELECT CUSTOMER_ID
FROM (
	SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL
	FROM SAKILA.PAYMENT
	GROUP BY CUSTOMER_ID
	ORDER BY TOTAL DESC
	LIMIT 1
) SUB2
)
)
)
;


-- 8. Get the client_id and the total_amount_spent of those clients who spent more than 
-- the average of the total_amount spent by each client.


SELECT * FROM SAKILA.PAYMENT;

SELECT CUSTOMER_ID, SUM(AMOUNT) SUM
FROM SAKILA.PAYMENT
GROUP BY CUSTOMER_ID;


CREATE TEMPORARY TABLE SAKILA.SUM_BY_CLIENTS AS
SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL_AMOUNT_SPENT
FROM SAKILA.PAYMENT
GROUP BY CUSTOMER_ID;


SELECT * FROM SAKILA.SUM_BY_CLIENTS;


SELECT AVG(TOTAL_AMOUNT_SPENT) 
FROM SAKILA.SUM_BY_CLIENTS;


SELECT * FROM SAKILA.AVG_OF_TOTAL_AMOUNT_SPENT;

SELECT CUSTOMER_ID, TOTAL_AMOUNT_SPENT
FROM SAKILA.SUM_BY_CLIENTS
WHERE TOTAL_AMOUNT_SPENT > 112.531820   -- Couldn't think of any better way to do this, I tried this - WHERE TOTAL_AMOUNT_SPENT > (SELECT AVG(TOTAL_AMOUNT_SPENT) AS TOTAL_SPENT FROM SAKILA.SUM_BY_CLIENTS) - but got an error = Code: 1137. Can't reopen table: 'SUM_BY_CLIENTS'
ORDER BY 2 DESC;

